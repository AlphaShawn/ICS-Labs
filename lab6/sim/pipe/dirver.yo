                      | #######################################################################
                      | # Test for copying block of size 20;
                      | #######################################################################
  0x000:              | 	.pos 0
  0x000: 30f428050000 | main:	irmovl Stack, %esp  	# Set up stack pointer
  0x006: 30f528050000 | 	irmovl Stack, %ebp  	# Set up base pointer
                      | 
                      | 	# Set up arguments for copy function and then invoke it
  0x00c: 30f014000000 | 	irmovl $20, %eax		# src and dst have 20 elements
  0x012: a00f         | 	pushl %eax
  0x014: 30f094040000 | 	irmovl dest, %eax	# dst array
  0x01a: a00f         | 	pushl %eax
  0x01c: 30f034040000 | 	irmovl src, %eax	# src array
  0x022: a00f         | 	pushl %eax
  0x024: 802f000000   | 	call ncopy		 
  0x029: 8043030000   | 	call check	        # Call checker code
  0x02e: 00           | 	halt                    # should halt with 0xaaaa in %eax
  0x02f:              | StartFun:
                      | #/* $begin ncopy-ys */
                      | ##################################################################
                      | # ncopy.ys - Copy a src block of len ints to dst.
                      | # Return the number of positive ints (>0) contained in src.
                      | #
                      | # Include your name and ID here.
                      | #
                      | # Student: XiaoYuwei
                      | # ID     : 5140379066
                      | # Data   :12.10
                      | # 
                      | # Describe how and why you modified the baseline code.
                      | # 
                      | # escription:
                      | #   1. use iaddl instead of using irmovl and rrmovl
                      | #   2. for loop unrolling. unrolling factor K=2
                      | #   3. rearrange some instruction
                      | #   4. 简化循环展开后剩余处理，至多执行一次
                      | #   5. 合并循环展开后value>0判断，使用xorl, a^b>=0 则a,b同号 反之异号
                      | ##################################################################
                      | # Do not modify this portion
                      | # Function prologue.
  0x02f: a05f         | ncopy:	pushl %ebp		# Save old frame pointer
  0x031: 2045         | 	rrmovl %esp,%ebp	# Set up new frame pointer
  0x033: a06f         | 	pushl %esi		# Save callee-save regs
  0x035: a03f         | 	pushl %ebx
  0x037: a07f         | 	pushl %edi
  0x039: 503508000000 | 	mrmovl 8(%ebp),%ebx	# src
  0x03f: 502510000000 | 	mrmovl 16(%ebp),%edx	# len
  0x045: 50150c000000 | 	mrmovl 12(%ebp),%ecx	# dst
                      | ##################################################################
                      | # You can modify this portion
                      | 	# Loop header
                      |     
  0x04b: 6300         |     xorl %eax,%eax		# count = 0;
  0x04d: c0f2f8ffffff |     iaddl $-8,%edx
  0x053: 755e010000   |     jge Loop8
  0x058: c0f208000000 |     iaddl $8, %edx
  0x05e: 7668000000   |     jg First
  0x063: 7038030000   |     jmp Done
  0x068:              | First:
  0x068: 506300000000 |     mrmovl (%ebx), %esi	# read val from src...
  0x06e: 507304000000 |     mrmovl 4(%ebx), %edi
  0x074: 406100000000 | 	rmmovl %esi, (%ecx)	# ...and store it to dst
  0x07a: 6266         | 	andl %esi, %esi		# val <= 0?
  0x07c: 7187000000   |     jle Second
  0x081: c0f001000000 |     iaddl $1, %eax
                      | 
  0x087:              | Second:
  0x087: c0f2ffffffff |     iaddl $-1, %edx
  0x08d: 7338030000   |     je Done
  0x092: 407104000000 | 	rmmovl %edi, 4(%ecx)	# ...and store it to dst
  0x098: 506308000000 |     mrmovl 8(%ebx), %esi
  0x09e: 6277         | 	andl %edi, %edi		# val <= 0?
  0x0a0: 71ab000000   |     jle Third
  0x0a5: c0f001000000 |     iaddl $1, %eax
                      | 
  0x0ab:              | Third:
  0x0ab: c0f2ffffffff |     iaddl $-1, %edx
  0x0b1: 7338030000   |     je Done
  0x0b6: 406108000000 |     rmmovl %esi, 8(%ecx)
  0x0bc: 6266         |     andl %esi, %esi
  0x0be: 71c9000000   |     jle Fourth
  0x0c3: c0f001000000 |     iaddl $1, %eax
                      | 
  0x0c9:              | Fourth:
  0x0c9: c0f2ffffffff |     iaddl $-1, %edx
  0x0cf: 7338030000   |     je Done
  0x0d4: 50630c000000 |     mrmovl 12(%ebx), %esi
  0x0da: 507310000000 |     mrmovl 16(%ebx), %edi
  0x0e0: 40610c000000 |     rmmovl %esi, 12(%ecx)
  0x0e6: 6266         |     andl %esi, %esi
  0x0e8: 71f3000000   |     jle Fifth
  0x0ed: c0f001000000 |     iaddl $1, %eax
                      | 
  0x0f3:              | Fifth:
  0x0f3: c0f2ffffffff |     iaddl $-1, %edx
  0x0f9: 7338030000   |     je Done
  0x0fe: 407110000000 |     rmmovl %edi, 16(%ecx)
  0x104: 6277         |     andl %edi, %edi
  0x106: 7111010000   |     jle Sixth
  0x10b: c0f001000000 |     iaddl $1, %eax
                      | 
  0x111:              | Sixth:
  0x111: c0f2ffffffff |     iaddl $-1, %edx
  0x117: 7338030000   |     je Done
  0x11c: 506314000000 |     mrmovl 20(%ebx), %esi
  0x122: 507318000000 |     mrmovl 24(%ebx), %edi
  0x128: 406114000000 |     rmmovl %esi, 20(%ecx)
  0x12e: 6266         |     andl %esi, %esi
  0x130: 713b010000   |     jle Seventh
  0x135: c0f001000000 |     iaddl $1, %eax
                      | 
  0x13b:              | Seventh:
  0x13b: c0f2ffffffff |     iaddl $-1, %edx
  0x141: 7338030000   |     je Done
  0x146: 407118000000 |     rmmovl %edi, 24(%ecx)
  0x14c: 6277         |     andl %edi, %edi
  0x14e: 7138030000   |     jle Done
  0x153: c0f001000000 |     iaddl $1, %eax
  0x159: 7038030000   |     jmp Done
                      | 
  0x15e:              | Loop8:
  0x15e: 506300000000 |     mrmovl (%ebx), %esi	    #stage1 read val from src... stage1
  0x164: 507304000000 |     mrmovl 4(%ebx), %edi	#stage2 read val from src...
  0x16a: 406100000000 | 	rmmovl %esi, (%ecx)	    #stage1 ...and store it to dst
  0x170: 407104000000 | 	rmmovl %edi, 4(%ecx)	#stage2 ...and store it to dst
                      |    
                      | # 合并value>0判断
  0x176: 6367         |     xorl %esi, %edi
  0x178: 7588010000   |     jge L21
  0x17d: c0f001000000 |     iaddl $1, %eax
  0x183: 7095010000   |     jmp L31
  0x188:              | L21:
  0x188: 6266         |     andl %esi, %esi
  0x18a: 7195010000   |     jle L31
  0x18f: c0f002000000 |     iaddl $2, %eax
                      | 
  0x195:              | L31:
  0x195: 506308000000 |     mrmovl 8(%ebx),%esi
  0x19b: 50730c000000 |     mrmovl 12(%ebx), %edi
  0x1a1: 406108000000 |     rmmovl %esi, 8(%ecx)
  0x1a7: 40710c000000 |     rmmovl %edi, 12(%ecx)
                      |  
  0x1ad: 6367         |     xorl %esi, %edi
  0x1af: 75bf010000   |     jge L22
  0x1b4: c0f001000000 |     iaddl $1, %eax
  0x1ba: 70cc010000   |     jmp L32
  0x1bf:              | L22:
  0x1bf: 6266         |     andl %esi, %esi
  0x1c1: 71cc010000   |     jle L32
  0x1c6: c0f002000000 |     iaddl $2, %eax
  0x1cc:              | L32:
  0x1cc: 506310000000 |     mrmovl 16(%ebx),%esi
  0x1d2: 507314000000 |     mrmovl 20(%ebx), %edi
  0x1d8: 406110000000 |     rmmovl %esi, 16(%ecx)
  0x1de: 407114000000 |     rmmovl %edi, 20(%ecx)
                      |  
  0x1e4: 6367         |     xorl %esi, %edi
  0x1e6: 75f6010000   |     jge L23
  0x1eb: c0f001000000 |     iaddl $1, %eax
  0x1f1: 7003020000   |     jmp L33
  0x1f6:              | L23:
  0x1f6: 6266         |     andl %esi, %esi
  0x1f8: 7103020000   |     jle L33
  0x1fd: c0f002000000 |     iaddl $2, %eax
  0x203:              | L33:
  0x203: 506318000000 |     mrmovl 24(%ebx),%esi
  0x209: 50731c000000 |     mrmovl 28(%ebx), %edi
  0x20f: 406118000000 |     rmmovl %esi, 24(%ecx)
  0x215: 40711c000000 |     rmmovl %edi, 28(%ecx)
                      |  
  0x21b: 6367         |     xorl %esi, %edi
  0x21d: 752d020000   |     jge L24
  0x222: c0f001000000 |     iaddl $1, %eax
  0x228: 703a020000   |     jmp L34
  0x22d:              | L24:
  0x22d: 6266         |     andl %esi, %esi
  0x22f: 713a020000   |     jle L34
  0x234: c0f002000000 |     iaddl $2, %eax
  0x23a:              | L34:
  0x23a: 506320000000 |     mrmovl 32(%ebx),%esi
  0x240: 507324000000 |     mrmovl 36(%ebx), %edi
  0x246: 406120000000 |     rmmovl %esi, 32(%ecx)
  0x24c: 407124000000 |     rmmovl %edi, 36(%ecx)
                      |  
  0x252: 6367         |     xorl %esi, %edi
  0x254: 7564020000   |     jge L25
  0x259: c0f001000000 |     iaddl $1, %eax
  0x25f: 7071020000   |     jmp L35
  0x264:              | L25:
  0x264: 6266         |     andl %esi, %esi
  0x266: 7171020000   |     jle L35
  0x26b: c0f002000000 |     iaddl $2, %eax
  0x271:              | L35:
  0x271: 506328000000 |     mrmovl 40(%ebx),%esi
  0x277: 50732c000000 |     mrmovl 44(%ebx), %edi
  0x27d: 406128000000 |     rmmovl %esi, 40(%ecx)
  0x283: 40712c000000 |     rmmovl %edi, 44(%ecx)
                      |  
  0x289: 6367         |     xorl %esi, %edi
  0x28b: 759b020000   |     jge L26
  0x290: c0f001000000 |     iaddl $1, %eax
  0x296: 70a8020000   |     jmp L36
  0x29b:              | L26:
  0x29b: 6266         |     andl %esi, %esi
  0x29d: 71a8020000   |     jle L36
  0x2a2: c0f002000000 |     iaddl $2, %eax
  0x2a8:              | L36:
  0x2a8: 506330000000 |     mrmovl 48(%ebx),%esi
  0x2ae: 507334000000 |     mrmovl 52(%ebx), %edi
  0x2b4: 406130000000 |     rmmovl %esi, 48(%ecx)
  0x2ba: 407134000000 |     rmmovl %edi, 52(%ecx)
                      |  
  0x2c0: 6367         |     xorl %esi, %edi
  0x2c2: 75d2020000   |     jge L27
  0x2c7: c0f001000000 |     iaddl $1, %eax
  0x2cd: 70df020000   |     jmp L37
  0x2d2:              | L27:
  0x2d2: 6266         |     andl %esi, %esi
  0x2d4: 71df020000   |     jle L37
  0x2d9: c0f002000000 |     iaddl $2, %eax
  0x2df:              | L37:
  0x2df: 506338000000 |     mrmovl 56(%ebx),%esi
  0x2e5: 50733c000000 |     mrmovl 60(%ebx), %edi
  0x2eb: 406138000000 |     rmmovl %esi, 56(%ecx)
  0x2f1: 40713c000000 |     rmmovl %edi, 60(%ecx)
                      |  
  0x2f7: 6367         |     xorl %esi, %edi
  0x2f9: 7509030000   |     jge L28
  0x2fe: c0f001000000 |     iaddl $1, %eax
  0x304: 7016030000   |     jmp L38
  0x309:              | L28:
  0x309: 6266         |     andl %esi, %esi
  0x30b: 7116030000   |     jle L38
  0x310: c0f002000000 |     iaddl $2, %eax
                      | 
  0x316:              | L38:
  0x316: c0f340000000 |     iaddl $0x40, %ebx
  0x31c: c0f140000000 |     iaddl $0x40, %ecx
  0x322: c0f2f8ffffff |     iaddl $-8, %edx         #update len
  0x328: 755e010000   | 	jge Loop8			    # if so, goto Loop2:
  0x32d: c0f208000000 |     iaddl $8, %edx          # check whether there is element remain
  0x333: 7668000000   |     jg First
                      | #   fall through
                      | 
                      | ##################################################################
                      | # Do not modify the following section of code
                      | # Function epilogue.
  0x338:              | Done:
  0x338: b07f         | 	popl %edi               # Restore callee-save registers
  0x33a: b03f         | 	popl %ebx
  0x33c: b06f         | 	popl %esi
  0x33e: 2054         | 	rrmovl %ebp, %esp
  0x340: b05f         | 	popl %ebp
  0x342: 90           | 	ret
                      | ##################################################################
                      | # Keep the following label at the end of your function
  0x343:              | End:
                      | #/* $end ncopy-ys */
  0x343:              | EndFun:
                      | #################################################################### 
                      | # Epilogue code for the correctness testing driver
                      | ####################################################################
                      | 
                      | # This is the correctness checking code.
                      | # It checks:
                      | #   1. %eax has 8.  Set %eax to 0xbbbb if not.
                      | #   2. The total length of the code is less than or equal to 1000.
                      | #      Set %eax to 0xcccc if not.
                      | #   3. The source data was copied to the destination.
                      | #      Set %eax to 0xdddd if not.
                      | #   4. The words just before and just after the destination region
                      | #      were not corrupted.  Set %eax to 0xeeee if not.
                      | # If all checks pass, then sets %eax to 0xaaaa
  0x343:              | check:
  0x343: a05f         | 	pushl %ebp
  0x345: 2045         | 	rrmovl %esp,%ebp
  0x347: a06f         | 	pushl %esi
  0x349: a03f         | 	pushl %ebx
  0x34b: a07f         | 	pushl %edi
                      | 	# Return value test
  0x34d: 30f208000000 | 	irmovl $8,%edx
  0x353: 6120         | 	subl %edx,%eax
  0x355: 7365030000   | 	je checkb
  0x35a: 30f0bbbb0000 | 	irmovl $0xbbbb,%eax  # Failed test #1
  0x360: 7027040000   | 	jmp cdone
  0x365:              | checkb:
                      | 	# Code length check
  0x365: 30f043030000 | 	irmovl EndFun,%eax
  0x36b: 30f22f000000 | 	irmovl StartFun,%edx
  0x371: 6120         | 	subl %edx,%eax
  0x373: 30f2e8030000 | 	irmovl $1000,%edx
  0x379: 6102         | 	subl %eax,%edx
  0x37b: 758b030000   | 	jge checkm
  0x380: 30f0cccc0000 | 	irmovl $0xcccc,%eax  # Failed test #2
  0x386: 7027040000   | 	jmp cdone
  0x38b:              | checkm:
  0x38b: 30f294040000 | 	irmovl dest, %edx # Pointer to next destination location
  0x391: 30f334040000 | 	irmovl src,%ebx   # Pointer to next source location
  0x397: 30f714000000 | 	irmovl $20,%edi  # Count
  0x39d: 6277         | 	andl %edi,%edi
  0x39f: 73d9030000   | 	je checkpre         # Skip check if count = 0
  0x3a4:              | mcloop:
  0x3a4: 500200000000 | 	mrmovl (%edx),%eax
  0x3aa: 506300000000 | 	mrmovl (%ebx),%esi
  0x3b0: 6160         | 	subl %esi,%eax
  0x3b2: 73c2030000   | 	je  mok
  0x3b7: 30f0dddd0000 | 	irmovl $0xdddd,%eax # Failed test #3
  0x3bd: 7027040000   | 	jmp cdone
  0x3c2:              | mok:
  0x3c2: 30f004000000 | 	irmovl $4,%eax
  0x3c8: 6002         | 	addl %eax,%edx	  # dest ++
  0x3ca: 6003         | 	addl %eax,%ebx    # src++
  0x3cc: 30f001000000 | 	irmovl $1,%eax
  0x3d2: 6107         | 	subl %eax,%edi    # cnt--
  0x3d4: 76a4030000   | 	jg mcloop
  0x3d9:              | checkpre:
                      | 	# Check for corruption
  0x3d9: 30f290040000 | 	irmovl Predest,%edx
  0x3df: 500200000000 | 	mrmovl (%edx), %eax  # Get word before destination
  0x3e5: 30f2fadebc00 | 	irmovl $0xbcdefa, %edx
  0x3eb: 6120         | 	subl %edx,%eax
  0x3ed: 73fd030000   | 	je checkpost
  0x3f2: 30f0eeee0000 | 	irmovl $0xeeee,%eax  # Failed test #4
  0x3f8: 7027040000   | 	jmp cdone
  0x3fd:              | checkpost:
                      | 	# Check for corruption
  0x3fd: 30f2e4040000 | 	irmovl Postdest,%edx
  0x403: 500200000000 | 	mrmovl (%edx), %eax  # Get word after destination
  0x409: 30f2bcfade00 | 	irmovl $0xdefabc, %edx
  0x40f: 6120         | 	subl %edx,%eax
  0x411: 7321040000   | 	je checkok
  0x416: 30f0eeee0000 | 	irmovl $0xeeee,%eax # Failed test #4
  0x41c: 7027040000   | 	jmp cdone
  0x421:              | checkok:
                      | 	# Successful checks
  0x421: 30f0aaaa0000 | 	irmovl $0xaaaa,%eax
  0x427:              | cdone:
  0x427: b07f         | 	popl %edi
  0x429: b03f         | 	popl %ebx
  0x42b: b06f         | 	popl %esi
  0x42d: 2054         | 	rrmovl %ebp, %esp
  0x42f: b05f         | 	popl %ebp
  0x431: 90           | 	ret
                      | 
                      | ###############################
                      | # Source and destination blocks 
                      | ###############################
  0x434:              | 	.align 4
  0x434:              | src:
  0x434: ffffffff     | 	.long -1
  0x438: 02000000     | 	.long 2
  0x43c: fdffffff     | 	.long -3
  0x440: fcffffff     | 	.long -4
  0x444: fbffffff     | 	.long -5
  0x448: faffffff     | 	.long -6
  0x44c: f9ffffff     | 	.long -7
  0x450: f8ffffff     | 	.long -8
  0x454: f7ffffff     | 	.long -9
  0x458: f6ffffff     | 	.long -10
  0x45c: 0b000000     | 	.long 11
  0x460: 0c000000     | 	.long 12
  0x464: 0d000000     | 	.long 13
  0x468: f2ffffff     | 	.long -14
  0x46c: f1ffffff     | 	.long -15
  0x470: 10000000     | 	.long 16
  0x474: 11000000     | 	.long 17
  0x478: 12000000     | 	.long 18
  0x47c: 13000000     | 	.long 19
  0x480: ecffffff     | 	.long -20
  0x484: fadebc00     | 	.long 0xbcdefa # This shouldn't get moved
                      | 
  0x490:              | 	.align 16
  0x490:              | Predest:
  0x490: fadebc00     | 	.long 0xbcdefa
  0x494:              | dest:
  0x494: abefcd00     | 	.long 0xcdefab
  0x498: abefcd00     | 	.long 0xcdefab
  0x49c: abefcd00     | 	.long 0xcdefab
  0x4a0: abefcd00     | 	.long 0xcdefab
  0x4a4: abefcd00     | 	.long 0xcdefab
  0x4a8: abefcd00     | 	.long 0xcdefab
  0x4ac: abefcd00     | 	.long 0xcdefab
  0x4b0: abefcd00     | 	.long 0xcdefab
  0x4b4: abefcd00     | 	.long 0xcdefab
  0x4b8: abefcd00     | 	.long 0xcdefab
  0x4bc: abefcd00     | 	.long 0xcdefab
  0x4c0: abefcd00     | 	.long 0xcdefab
  0x4c4: abefcd00     | 	.long 0xcdefab
  0x4c8: abefcd00     | 	.long 0xcdefab
  0x4cc: abefcd00     | 	.long 0xcdefab
  0x4d0: abefcd00     | 	.long 0xcdefab
  0x4d4: abefcd00     | 	.long 0xcdefab
  0x4d8: abefcd00     | 	.long 0xcdefab
  0x4dc: abefcd00     | 	.long 0xcdefab
  0x4e0: abefcd00     | 	.long 0xcdefab
  0x4e4:              | Postdest:
  0x4e4: bcfade00     | 	.long 0xdefabc
                      | 
  0x4e8:              | .align 4
                      | # Run time stack
  0x4e8: 00000000     | 	.long 0
  0x4ec: 00000000     | 	.long 0
  0x4f0: 00000000     | 	.long 0
  0x4f4: 00000000     | 	.long 0
  0x4f8: 00000000     | 	.long 0
  0x4fc: 00000000     | 	.long 0
  0x500: 00000000     | 	.long 0
  0x504: 00000000     | 	.long 0
  0x508: 00000000     | 	.long 0
  0x50c: 00000000     | 	.long 0
  0x510: 00000000     | 	.long 0
  0x514: 00000000     | 	.long 0
  0x518: 00000000     | 	.long 0
  0x51c: 00000000     | 	.long 0
  0x520: 00000000     | 	.long 0
  0x524: 00000000     | 	.long 0
                      | 
  0x528:              | Stack:
