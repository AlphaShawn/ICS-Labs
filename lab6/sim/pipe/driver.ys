#######################################################################
# Test for copying block of size 431;
#######################################################################
	.pos 0
main:	irmovl Stack, %esp  	# Set up stack pointer
	irmovl Stack, %ebp  	# Set up base pointer

	# Set up arguments for copy function and then invoke it
	irmovl $431, %eax		# src and dst have 431 elements
	pushl %eax
	irmovl dest, %eax	# dst array
	pushl %eax
	irmovl src, %eax	# src array
	pushl %eax
	call ncopy		 
	call check	        # Call checker code
	halt                    # should halt with 0xaaaa in %eax
StartFun:
#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len ints to dst.
# Return the number of positive ints (>0) contained in src.
#
# Include your name and ID here.
#
# Student: XiaoYuwei
# ID     : 5140379066
# 
# Describe how and why you modified the baseline code.
# 
# escription:
#   Data:12.10
#   1. use iaddl instead of using irmovl and rrmovl
#   2. for loop unrolling. unrolling factor K=4
#   3. rearrange some instruction
#   4. 合并循环展开后value>0判断，使用xorl, a^b>=0 则a,b同号 反之异号
#   
#   Data:12.15
#   5.实现跳表、结合pipeline改进，使得pushxxx ,ret 组合指令bubble最少
#   6.改进value>0判断，利用mrmovl实现右移操作,从而规避jmp判断
#       正数转换成0、负数转换成-1. %eax初始为%edx 
#       局限：value = 0无法判断 但是测试数据里没有0
#   
#################################################################
# Do not modify this portion
# Function prologue.
ncopy:	pushl %ebp		# Save old frame pointer
	rrmovl %esp,%ebp	# Set up new frame pointer
	pushl %esi		# Save callee-save regs
	pushl %ebx
	pushl %edi
	mrmovl 8(%ebp),%ebx	# src
	mrmovl 16(%ebp),%edx	# len
	mrmovl 12(%ebp),%ecx	# dst
##################################################################
# You can modify this portion
	# Loop headedx
    #
    rrmovl %edx, %eax
    iaddl $-4,%edx
    jge Loop4
    addl %edx, %edx          # check whether there is element remain
    addl %edx, %edx
    mrmovl TTT(%edx), %edx
    pushl %edx
    ret

Loop4:

    mrmovl (%ebx), %esi     # round 1
    mrmovl 2(%ebx), %edi
    rmmovl %esi, (%ecx)
    addl %edi, %eax

    mrmovl 4(%ebx), %esi     # round 2
    mrmovl 6(%ebx), %edi
    rmmovl %esi, 4(%ecx)
    addl %edi, %eax

    mrmovl 8(%ebx), %esi     # round 3
    mrmovl 10(%ebx), %edi
    rmmovl %esi, 8(%ecx)
    addl %edi, %eax

    mrmovl 12(%ebx), %esi     # round 4
    mrmovl 14(%ebx), %edi
    rmmovl %esi, 12(%ecx)
    addl %edi, %eax

    iaddl $0x10, %ecx       #update pointer 
    iaddl $0x10, %ebx
    iaddl $-4, %edx         #update len
	jge Loop4			    # if so, goto Loop4:
    addl %edx, %edx         # jumpTable  %edx *=4  byte -> long
    addl %edx, %edx
    mrmovl TTT(%edx), %edx
    pushl %edx
    ret

Three:
    mrmovl 8(%ebx), %esi    
    mrmovl 10(%ebx), %edi
    rmmovl %esi, 8(%ecx)
    addl %edi, %eax 

Two:
    mrmovl 4(%ebx), %esi
    mrmovl 6(%ebx), %edi
    rmmovl %esi, 4(%ecx)
    addl %edi, %eax 

One:
    mrmovl (%ebx), %esi
    mrmovl 2(%ebx), %edi
    rmmovl %esi, (%ecx)
    addl %edi, %eax 

DoneHelp:
    irmovl $0x0000ffff, %edi
    andl %edi, %eax
    jmp 0x29
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
   	popl %edi               # Restore callee-save registers
	popl %ebx
	popl %esi
	rrmovl %ebp, %esp
	popl %ebp
	ret
##################################################################
# Keep the following label at the end of your function
End:
.align 4
array:
    .long 0x115
    .long 0x101
    .long 0xed
    .long 0xd9
TTT:
#/* $end ncopy-ys */
EndFun:
#################################################################### 
# Epilogue code for the correctness testing driver
####################################################################

# This is the correctness checking code.
# It checks:
#   1. %eax has 233.  Set %eax to 0xbbbb if not.
#   2. The total length of the code is less than or equal to 1000.
#      Set %eax to 0xcccc if not.
#   3. The source data was copied to the destination.
#      Set %eax to 0xdddd if not.
#   4. The words just before and just after the destination region
#      were not corrupted.  Set %eax to 0xeeee if not.
# If all checks pass, then sets %eax to 0xaaaa
check:
	pushl %ebp
	rrmovl %esp,%ebp
	pushl %esi
	pushl %ebx
	pushl %edi
	# Return value test
	irmovl $233,%edx
	subl %edx,%eax
	je checkb
	irmovl $0xbbbb,%eax  # Failed test #1
	jmp cdone
checkb:
	# Code length check
	irmovl EndFun,%eax
	irmovl StartFun,%edx
	subl %edx,%eax
	irmovl $1000,%edx
	subl %eax,%edx
	jge checkm
	irmovl $0xcccc,%eax  # Failed test #2
	jmp cdone
checkm:
	irmovl dest, %edx # Pointer to next destination location
	irmovl src,%ebx   # Pointer to next source location
	irmovl $431,%edi  # Count
	andl %edi,%edi
	je checkpre         # Skip check if count = 0
mcloop:
	mrmovl (%edx),%eax
	mrmovl (%ebx),%esi
	subl %esi,%eax
	je  mok
	irmovl $0xdddd,%eax # Failed test #3
	jmp cdone
mok:
	irmovl $4,%eax
	addl %eax,%edx	  # dest ++
	addl %eax,%ebx    # src++
	irmovl $1,%eax
	subl %eax,%edi    # cnt--
	jg mcloop
checkpre:
	# Check for corruption
	irmovl Predest,%edx
	mrmovl (%edx), %eax  # Get word before destination
	irmovl $0xbcdefa, %edx
	subl %edx,%eax
	je checkpost
	irmovl $0xeeee,%eax  # Failed test #4
	jmp cdone
checkpost:
	# Check for corruption
	irmovl Postdest,%edx
	mrmovl (%edx), %eax  # Get word after destination
	irmovl $0xdefabc, %edx
	subl %edx,%eax
	je checkok
	irmovl $0xeeee,%eax # Failed test #4
	jmp cdone
checkok:
	# Successful checks
	irmovl $0xaaaa,%eax
cdone:
	popl %edi
	popl %ebx
	popl %esi
	rrmovl %ebp, %esp
	popl %ebp
	ret

###############################
# Source and destination blocks 
###############################
	.align 4
src:
	.long -1
	.long 2
	.long 3
	.long -4
	.long 5
	.long 6
	.long 7
	.long -8
	.long -9
	.long -10
	.long 11
	.long 12
	.long -13
	.long 14
	.long -15
	.long -16
	.long -17
	.long -18
	.long 19
	.long 20
	.long 21
	.long 22
	.long -23
	.long -24
	.long -25
	.long -26
	.long -27
	.long 28
	.long 29
	.long 30
	.long -31
	.long 32
	.long -33
	.long -34
	.long 35
	.long 36
	.long -37
	.long -38
	.long 39
	.long -40
	.long 41
	.long -42
	.long 43
	.long 44
	.long -45
	.long -46
	.long 47
	.long -48
	.long 49
	.long -50
	.long 51
	.long -52
	.long -53
	.long -54
	.long -55
	.long 56
	.long 57
	.long 58
	.long 59
	.long 60
	.long 61
	.long -62
	.long 63
	.long -64
	.long -65
	.long -66
	.long -67
	.long 68
	.long 69
	.long 70
	.long 71
	.long -72
	.long -73
	.long 74
	.long 75
	.long -76
	.long 77
	.long -78
	.long 79
	.long 80
	.long 81
	.long -82
	.long -83
	.long 84
	.long 85
	.long -86
	.long 87
	.long -88
	.long 89
	.long 90
	.long -91
	.long -92
	.long 93
	.long -94
	.long 95
	.long 96
	.long 97
	.long -98
	.long 99
	.long -100
	.long -101
	.long -102
	.long -103
	.long -104
	.long 105
	.long -106
	.long 107
	.long 108
	.long 109
	.long -110
	.long 111
	.long 112
	.long -113
	.long 114
	.long 115
	.long -116
	.long 117
	.long 118
	.long -119
	.long 120
	.long 121
	.long 122
	.long 123
	.long 124
	.long -125
	.long 126
	.long -127
	.long -128
	.long -129
	.long -130
	.long 131
	.long -132
	.long -133
	.long -134
	.long 135
	.long 136
	.long -137
	.long 138
	.long -139
	.long -140
	.long -141
	.long -142
	.long 143
	.long 144
	.long 145
	.long -146
	.long -147
	.long 148
	.long -149
	.long 150
	.long 151
	.long 152
	.long -153
	.long 154
	.long 155
	.long -156
	.long 157
	.long -158
	.long 159
	.long -160
	.long 161
	.long 162
	.long -163
	.long 164
	.long -165
	.long -166
	.long 167
	.long -168
	.long 169
	.long 170
	.long -171
	.long 172
	.long -173
	.long 174
	.long 175
	.long -176
	.long -177
	.long 178
	.long -179
	.long 180
	.long 181
	.long -182
	.long 183
	.long -184
	.long 185
	.long 186
	.long 187
	.long 188
	.long -189
	.long -190
	.long 191
	.long -192
	.long -193
	.long 194
	.long 195
	.long 196
	.long 197
	.long -198
	.long -199
	.long 200
	.long 201
	.long 202
	.long -203
	.long 204
	.long -205
	.long -206
	.long -207
	.long 208
	.long 209
	.long -210
	.long 211
	.long 212
	.long 213
	.long 214
	.long 215
	.long -216
	.long 217
	.long -218
	.long 219
	.long 220
	.long -221
	.long 222
	.long -223
	.long -224
	.long 225
	.long 226
	.long -227
	.long 228
	.long 229
	.long -230
	.long 231
	.long -232
	.long -233
	.long -234
	.long 235
	.long -236
	.long -237
	.long -238
	.long -239
	.long -240
	.long -241
	.long 242
	.long -243
	.long 244
	.long 245
	.long 246
	.long 247
	.long 248
	.long 249
	.long 250
	.long -251
	.long -252
	.long -253
	.long -254
	.long 255
	.long -256
	.long 257
	.long 258
	.long 259
	.long 260
	.long 261
	.long 262
	.long 263
	.long -264
	.long -265
	.long 266
	.long -267
	.long -268
	.long -269
	.long 270
	.long 271
	.long -272
	.long 273
	.long 274
	.long -275
	.long -276
	.long 277
	.long -278
	.long -279
	.long 280
	.long 281
	.long 282
	.long 283
	.long 284
	.long -285
	.long -286
	.long -287
	.long -288
	.long 289
	.long 290
	.long 291
	.long -292
	.long -293
	.long 294
	.long 295
	.long -296
	.long -297
	.long 298
	.long -299
	.long -300
	.long -301
	.long 302
	.long 303
	.long -304
	.long 305
	.long 306
	.long -307
	.long -308
	.long -309
	.long -310
	.long 311
	.long -312
	.long 313
	.long -314
	.long -315
	.long -316
	.long -317
	.long -318
	.long -319
	.long -320
	.long 321
	.long -322
	.long -323
	.long -324
	.long 325
	.long 326
	.long 327
	.long 328
	.long 329
	.long 330
	.long -331
	.long -332
	.long 333
	.long 334
	.long 335
	.long 336
	.long 337
	.long -338
	.long 339
	.long -340
	.long -341
	.long 342
	.long -343
	.long -344
	.long -345
	.long -346
	.long 347
	.long -348
	.long 349
	.long 350
	.long 351
	.long -352
	.long -353
	.long -354
	.long -355
	.long 356
	.long 357
	.long 358
	.long -359
	.long 360
	.long 361
	.long 362
	.long 363
	.long 364
	.long 365
	.long -366
	.long -367
	.long 368
	.long 369
	.long 370
	.long -371
	.long -372
	.long -373
	.long 374
	.long -375
	.long 376
	.long 377
	.long 378
	.long 379
	.long -380
	.long 381
	.long 382
	.long 383
	.long 384
	.long 385
	.long -386
	.long 387
	.long -388
	.long 389
	.long -390
	.long -391
	.long 392
	.long -393
	.long 394
	.long -395
	.long -396
	.long 397
	.long 398
	.long 399
	.long 400
	.long 401
	.long 402
	.long 403
	.long 404
	.long 405
	.long -406
	.long 407
	.long -408
	.long 409
	.long 410
	.long -411
	.long 412
	.long 413
	.long 414
	.long 415
	.long 416
	.long -417
	.long -418
	.long 419
	.long -420
	.long 421
	.long 422
	.long 423
	.long -424
	.long 425
	.long -426
	.long 427
	.long -428
	.long -429
	.long 430
	.long -431
	.long 0xbcdefa # This shouldn't get moved

	.align 16
Predest:
	.long 0xbcdefa
dest:
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
Postdest:
	.long 0xdefabc

.align 4
# Run time stack
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0

Stack:
