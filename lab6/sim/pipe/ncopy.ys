#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len ints to dst.
# Return the number of positive ints (>0) contained in src.
#
# Include your name and ID here.
#
# Student: XiaoYuwei
# ID     : 5140379066
# 
# Describe how and why you modified the baseline code.
# 
# escription:
#   Data:12.10
#   1. use iaddl instead of using irmovl and rrmovl
#   2. for loop unrolling. unrolling factor K=4
#   3. rearrange some instruction
#   4. 合并循环展开后value>0判断，使用xorl, a^b>=0 则a,b同号 反之异号
#   
#   Data:12.15
#   5.实现跳表、结合pipeline改进，使得pushxxx ,ret 组合指令bubble最少
#   6.改进value>0判断，利用mrmovl实现右移操作,从而规避jmp判断
#       正数转换成0、负数转换成-1. %eax初始为%edx 
#       局限：value = 0无法判断 但是测试数据里没有0
#   
#   Data:12.18
#   7.修改value>0判断支持所有情况,不受value 大小个数限制, 合并2次判断
#   ################################################################
# Do not modify this portion
# Function prologue.
ncopy:	pushl %ebp		# Save old frame pointer
	rrmovl %esp,%ebp	# Set up new frame pointer
	pushl %esi		# Save callee-save regs
	pushl %ebx
	pushl %edi
	mrmovl 8(%ebp),%ebx	# src
	mrmovl 16(%ebp),%edx	# len
	mrmovl 12(%ebp),%ecx	# dst
##################################################################
# You can modify this portion
	# Loop headedx
    #
    xorl %eax,%eax		    # count = 0;
    iaddl $-4,%edx
    jge Loop4
    addl %edx, %edx         # %edx *=4, byte to long
    addl %edx, %edx
    mrmovl TTT(%edx), %edx
    pushl %edx
    ret                     #jump table

Loop4:
    mrmovl (%ebx), %esi     # round 1
    mrmovl 4(%ebx), %edi    # round 2
    rmmovl %esi, (%ecx)
    xorl %edi, %esi		    # val <= 0?
    rmmovl %edi, 4(%ecx)
    jge Loop4L2
    iaddl $1, %eax 
    jmp Loop4L3
Loop4L2:
    andl %edi, %edi
    jle Loop4L3
    iaddl $2, %eax

Loop4L3:
    mrmovl 8(%ebx), %esi    # round 3
    mrmovl 12(%ebx), %edi   # round 4
    rmmovl %esi, 8(%ecx)
    xorl %edi, %esi		    # val <= 0?
    rmmovl %edi, 12(%ecx)
    jge Loop4L23
    iaddl $1, %eax 
    jmp Loop4L33
Loop4L23:
    andl %edi, %edi
    jle Loop4L33
    iaddl $2, %eax
Loop4L33:

    iaddl $0x10, %ecx       #update pointer 
    iaddl $0x10, %ebx
    iaddl $-4, %edx         #update len
	jge Loop4			    # if so, goto Loop4:
    addl %edx, %edx         # jumpTable  %edx *=4  byte -> long
    addl %edx, %edx
    mrmovl TTT(%edx), %edx
    pushl %edx
    ret

Three:
    mrmovl 8(%ebx), %esi    
    rmmovl %esi, 8(%ecx)
    andl %esi, %esi		    # val <= 0?
    jle Two
    iaddl $1, %eax 

Two:
    mrmovl 4(%ebx), %esi
    rmmovl %esi, 4(%ecx)
    andl %esi, %esi		    # val <= 0?
    jle One
    iaddl $1, %eax 

One:
    mrmovl (%ebx), %esi
    rmmovl %esi, (%ecx)
    andl %esi, %esi		    # val <= 0?
    jle 0x29
    iaddl $1, %eax 
    jmp 0x29
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
   	popl %edi               # Restore callee-save registers
	popl %ebx
	popl %esi
	rrmovl %ebp, %esp
	popl %ebp
	ret
##################################################################
# Keep the following label at the end of your function
# jump table
End:
.align 4
array:
    .long 0x29      #len=0, ret
    .long 0x129     #len=1
    .long 0x110     #len=2
    .long 0xf7      #len=3
TTT:
#/* $end ncopy-ys */
